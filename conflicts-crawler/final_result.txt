Result for 3scale_ws_api_for_java_commit_c3b5f5d43f5699e2e4d698bd32a74dad9ac1d477_HttpSenderImpl.java:

 The  ` Api Http Client Impl `  class  is  the  implementation  of  the  ` Api Http Client `  interface  and  provides  methods  for  sending  HTTP  POST  requests  to  a  server .  It  uses  an  instance  of  ` Http Connection Factory `  to  establish  connections  to  the  server .  The  ` send Post To Server `  method  sends  a  POST  request  to  the  server  and  returns  the  response  as  an  ` Api Http Response `. 
 
 The  ` send Get To Server `  method  sends  a  GET  request  to  the  server  and  returns  the  response  as  an  ` Api Http Response `.  It  handles  errors  by  returning  an  error  message  with  an  HTTP  status  code  of   4 0 3  or   4 0 4 . 
 
 The  ` extract Content `  method  reads  the  contents  of  the  response  from  the  input  stream  and  returns  it  as  a  string .  The  ` get Error Message `  method  reads  the  error  message  from  the  response  and  returns  it  as  a  string .  The  ` handle Errors `  method  handles  errors  by  returning  an  error  message  with  an  HTTP  status  code  of   5 0 0 . 
 
 The  ` Http Connection Factory Impl `  class  provides  an  implementation  of  the  ` Http Connection Factory `  interface  that  creates  new  live  connections  to  the  server  using  the  ` open Connection `  method . 

Result for 3scale_ws_api_for_java_commit_332b6ed4e324199565e235cd915368f9bc1b43d2_Api2Impl.java:

 [PY TH ON ] 
 #  This  file  is  part  of  the  api 2  library  for  Python . 
 #  ( C )   2 0 1 3  The  api 2  developers 
 #  Dist ributed  under  the  M IT  License ;  see  L IC EN SE  for  details . 
 
 import  logging 
 from  url lib  import  url encode 
 import  base 6 4 
 import  time 
 
 from  exceptions  import  * 
 
 log  =  logging . get Logger (__ name __ ) 
 
 class  Api 2 ( object ): 
      """ 
      Im plementation  of  the  API  V 2 . 
 
      : param  host _ url :  The  URL  for  the  API  server  to  connect  to .  ( e . g .  http :// api . ap ige e . com / v 1 /) 
      : param  app _ id :  The  application  ID  to  report  usage  on  beh alf  of . 
      : param  provider _ key :  The  private  key  provided  by  Ap ige e  for  this  application . 
      """ 
      def  __ init __( self ,  host _ url ,  app _ id ,  provider _ key ): 
          self ._ host _ url  =  host _ url 
          self ._ app _ id  =  app _ id 
          self ._ provider _ key  =  provider _ key 
 
      @ property 
      def  host _ url ( self ): 
          return  self ._ host _ url 
 
      @ host _ url . set ter 
      def  host _ url ( self ,  url ): 
          if  not  url : 
              raise  Value Error (" host _ url  must  be  provided ") 
          self ._ host _ url  =  url 
 
      @ property 
      def  app _ id ( self ): 
          return  self ._ app _ id 
 
      @ app _ id . set ter 
      def  app _ id ( self ,  app _ id ): 
          if  not  app _ id : 
              raise  Value Error (" app _ id  must  be  provided ") 
          self ._ app _ id  =  app _ id 
      @ property 
      def  provider _ key ( self ): 
          return  self ._ provider _ key 
 
      @ provider _ key . set ter 
      def  provider _ key ( self ,  key ): 
          if  not  key : 
              raise  Value Error (" provider _ key  must  be  provided ") 
          self ._ provider _ key  =  key 
 
      #  Private  functions 
 
      def  _ request _ data ( self ,  transactions ): 
          data  =  {} 
          for  transaction  in  transactions : 
              data [transaction . get (' app _ id ') ]  =  { 
                  ' met rics ':  transaction . get (' met rics '), 
                  ' timestamp ':  self ._ format _ date ( transaction . get (' timestamp ')) 
              } 
          return  data 
 
      #  Public  functions 
 
      def  get _ bal ance ( self ): 
          """ Return s  the  balance  of  a  specific  account ." "" 
          url  =  "% s / account s /% s "  %  ( self . host _ url ,  self . app _ id ) 
          response  =  self ._ make _ request ( url ) 
          return  response . json () [' bal ance '] 
 
      def  report _ usage ( self ,  transactions ): 
          """ Report  usage  of  a  specific  account ." "" 
          data  =  self ._ request _ data ( trans actions ) 
          url  =  "% s / account s /% s "  %  ( self . host _ url ,  self . app _ id ) 
          response  =  self ._ make _ request ( url ,  data = data ) 
          return  response . json () 
 
      def  _ make _ request ( self ,  url ,  data ): 
          import  requests 
          headers  =  { 
              ' Authorization ':  " Basic  % s "  %  base 6 4 . b 6 4 encode (' % s :% s '  %  ( self . app _ id ,  self . provider _ key )), 
              ' Content - Type ':  ' application / x - www - form - url encoded ', 
              ' Accept ':  ' application / json ' 
          } 
          response  =  requests . post ( url = url ,  data = data ,  headers = headers ) 
          if  not  response . status _ code  ==   2 0 1 : 
              raise  Request Error (" Request  was  not  successful :  % d "  %  ( response . status _ code )) 
          return  response 
 
      def  _ format _ date ( self ,  date ): 
          """ Form ats  a  datetime  object  to  the  ISO 8 6 0 1  format ." "" 
          return  time . str ft ime ("% Y -% m -% d T % H :% M :% S ",  date ) 
 
 [/PY TH ON ] 
 
 
 [RO B OT PY ] 
 #  This  file  is  part  of  the  api 2  library  for  Rob ot Py . 
 #  ( C )   2 0 1 3  The  api 2  developers 
 #  Dist ributed  under  the  M IT  License ;  see  L IC EN SE  for  details . 
 
 import  logging 
 import  base 6 4 
 import  time 
 
 from  exceptions  import  * 
 
 log  =  logging . get Logger (__ name __ ) 
 
 class  Api 2 ( object ): 
      """ Im plementation  of  the  API  V 2 ." "" 
      def  __ init __( self ,  host _ url ,  app _ id ,  provider _ key ): 
          self ._ host _ url  =  host _ url 
          self ._ app _ id  =  app _ id 
          self ._ provider _ key  =  provider _ key 
 
      @ property 
      def  host _ url ( self ): 
          return  self ._ host _ url 
 
      @ host _ url . set ter 
      def  host _ url ( self ,  url ): 
          if  not  url : 
              raise  Value Error (" host _ url  must  be  provided ") 
          self ._ host _ url  =  url 
 
      @ property 
      def  app _ id ( self ): 
          return  self ._ app _ id 
 
      @ app _ id . set ter 
      def  app _ id ( self ,  app _ id ): 
          if  not  app _ id : 
              raise  Value Error (" app _ id  must  be  provided ") 
          self ._ app _ id  =  app _ id 
 
      @ property 
      def  provider _ key ( self ): 
          return  self ._ provider _ key 
 
      @ provider _ key . set ter 
      def  provider _ key ( self ,  key ): 
          if  not  key : 
              raise  Value Error (" provider _ key  must  be  provided ") 
          self ._ provider _ key  =  key 
 
      #  Private  functions 
 
      def  _ request _ data ( self ,  transactions ): 
          data  =  {} 
          for  transaction  in  transactions : 
              data [transaction . get (' app _ id ') ]  =  { 
                  ' met rics ':  transaction . get (' met rics '), 
                  ' timestamp ':  self ._ format _ date ( transaction . get (' timestamp ')) 
              } 
          return  data 
 
      #  Public  functions 
 
      def  get _ bal ance ( self ): 
          """ Return s  the  balance  of  a  specific  account ." "" 
          url  =  "% s / account s /% s "  %  ( self . host _ url ,  self . app _ id ) 
          response  =  self ._ make _ request ( url ) 
          return  response . json () [' bal ance '] 
 
      def  report _ usage ( self ,  transactions ): 
          """ Report  usage  of  a  specific  account ." "" 
          data  =  self ._ request _ data ( trans actions ) 
          url  =  "% s / account s /% s "  %  ( self . host _ url ,  self . app _ id ) 
          response  =  self ._ make _ request ( url ,  data = data ) 
          return  response . json () 
 
      def  _ make _ request ( self ,  url ,  data ): 
          import  url lib 2 
          headers  =  { 
              ' Authorization ':  " Basic  % s "  %  base 6 4 . b 6 4 encode (' % s :% s '  %  ( self . app _ id ,  self . provider _ key )), 
              ' Content - Type ':  ' application / x - www - form - url encoded ', 
              ' Accept ':  ' application / json ' 
          } 
          request  =  url lib 2 . Request ( url = url ,  data = data ) 
          request . add _ header (* headers . iter items ()) 
          response  =  url lib 2 . ur lo pen ( request ) 
          if  not  response . get code ()  ==   2 0 1 : 
              raise  Request Error (" Request  was  not  successful :  % d "  %  ( response . get code ())) 
          return  response 
 
      def  _ format _ date ( self ,  date ): 
          """ Form ats  a  datetime  object  to  the  ISO 8 6 0 1  format ." "" 
          return  time . str ft ime ("% Y -% m -% d T % H :% M :% S ",  date ) 
 
 [/RO B OT PY ] 
 

